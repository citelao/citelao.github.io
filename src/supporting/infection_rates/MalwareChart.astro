---
import { Debug } from 'astro/components';
import d3 from "d3";
import d3time from "d3-time";

import data from "./infectionRates";

const height = 200;
const width = 800;
const margin = {
    top: 10,
    left: 50,
    right: 10,
    bottom: 20,
};

const x = d3.scaleTime()
    .domain([
        d3.min(data, d => d.startDate)!,
        d3.max(data, d => d.endDate)!
    ])
    .range([margin.left, width - margin.right])
    .nice();

const y = d3.scaleLinear()
    .domain([0, 1.0])
    .range([height - margin.bottom, margin.top])
    .interpolate(d3.interpolateRound);

// http://vrl.cs.brown.edu/color
// https://colorbrewer2.org/#type=diverging&scheme=BrBG&n=4
const colorFill = d3.scaleOrdinal<string>()
    .domain(data.map((d) => d.group))
    .range([
        "rgba(166,97,26, 0.8)",
        "rgba(223,194,125, 0.8)",
        "rgba(128,205,193, 0.8)",
        "rgba(1,133,113, 0.8)",
    ]);

---

<style define:vars={{ width: `${width}px`, tickColor: "rgba(0,0,0,0.5)" }}>
    svg {
        max-width: var(--width);
        font: 10px sans-serif;
        display: block
    }

    rect {
        stroke: var(--tickColor);
        /* stroke: white; */
    }

    .tickFill {
        fill: var(--tickColor);
    }

    .tickStroke { 
        stroke: var(--tickColor);
    }
</style>

<svg viewBox={`0 0 ${width} ${height}`}>
    <!-- X ticks -->
    <g>
        {x.ticks(10).map((t) => {
            // Happens to be one tick every year.
            const nextYear = (new Date(t)).setFullYear(t.getFullYear() + 1);
            const nextYearPt = x(nextYear);
            const textPos = ((nextYearPt - x(t)) / 2) + x(t);
            return (
                <line
                    class="tickStroke"
                    x1={x(t)}
                    x2={x(t)}
                    y1={y.range()[0]}
                    y2={y.range()[0] + 5}
                    />
                <text
                    class="tickFill"
                    text-anchor="middle"
                    dominant-baseline="hanging"
                    x={textPos}
                    y={y.range()[0]}
                    dy={5}>{t.getFullYear()}</text>
            );
        })}
    </g>
    <!-- Y ticks -->
    <g>
        {y.ticks(4).map((t) => {
            return (
                <text
                    class="tickFill"
                    text-anchor="end"
                    dominant-baseline="middle"
                    x={x.range()[0] - 5}
                    y={y(t)}>{t * 100}%</text>
            );
        })}
    </g>
    <!-- Graph -->
    <g>
        {data.map((d) => {
            const itemHeight = y(0) - y(d.encounterRate);
            const width = x(d.endDate) - x(d.startDate);
            return (
                <rect
                    fill={colorFill(d.group)}
                    x={x(d.startDate)}
                    y={y(d.encounterRate)}
                    width={width} 
                    height={itemHeight}></rect>
                <text
                    fill="black"
                    text-anchor="middle"
                    x={x(d.startDate) + (width / 2)}
                    y={y(0)}
                    dy={- itemHeight - 5}>{(d.encounterRate * 100).toFixed(1)}%</text>
            );
        })}
    </g>
</svg>
